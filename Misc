//        let screenTap = UITapGestureRecognizer(target: self, action: "createBall:")
//        screenTap.numberOfTapsRequired = 1
//        self.scnView!.addGestureRecognizer(screenTap)

//boingBallNode!.position = SCNVector3(x: 0, y: 0, z: -7)

//let projectedOrigin = self.scnView!.projectPoint(SCNVector3Zero)
//let vp = touch.locationInView(scnView!)
//let vpWithZ = SCNVector3(x: Float(vp.x), y: Float(vp.y), z: projectedOrigin.z)
//let worldPoint = self.scnView!.unprojectPoint(vpWithZ)

//boingBallNode!.position = SCNVector3(x: worldPoint.x, y: worldPoint.y, z: -7)
//boingBallNode!.position = worldPoint
//let touchPoint = touch.locationInView(self.view)


func placeDasModel(touch: UITapGestureRecognizer) {
print("hiii")
//        let touchPoint = touch .locationInView(self.view)
//        let DynamicView = UIView(frame: CGRectMake(touchPoint.x, touchPoint.y, 100, 100))
//        DynamicView.backgroundColor=UIColor.greenColor()
//        DynamicView.layer.cornerRadius=25
//        DynamicView.layer.borderWidth=2
//        self.view.addSubview(DynamicView)
//
//        self.createBall()
//        boingBallNode!.position = SCNVector3(x: Float(touchPoint.x), y: Float(touchPoint.y), z: -7)
//scene!.rootNode.addChildNode(boingBallNode!)

}


// Make the ball fly
//            let animation = CABasicAnimation(keyPath: "position.z")
//            animation.byValue = 130.0
//            animation.timingFunction = CAMediaTimingFunction(name: kCAMediaTimingFunctionDefault)
//            animation.autoreverses = false
//            animation.repeatCount = 0
//            animation.duration = 4.5
//            boingBallNode!.addAnimation(animation, forKey: "fly1")

//            speed = speed! - 0.01;
//            nodeTimer?.fireDate = nodeTimer!.fireDate.dateByAddingTimeInterval(Double(speed!))

//        self.highScoreLabel = UILabel()
//        self.highScoreLabel?.frame = CGRectMake(0,10, self.view.frame.size.width, 40)
//        self.highScoreLabel?.textColor = UIColor.whiteColor()
//        self.highScoreLabel?.textAlignment = NSTextAlignment.Center
//        self.highScoreLabel?.font = UIFont(name: "AvenirNext-Heavy", size: 20.0)
//
//        self.highScoreLabel?.text = "high score: \(highScore!)"
//        self.highScoreLabel?.alpha = 0.88
//        self.view.addSubview(self.highScoreLabel!)


//        let colorView = UIView()
//        colorView.backgroundColor = UIColor.whiteColor()//UIColor(red:0.4, green:0.65, blue:0.88, alpha:1.0)
//        colorView.frame = CGRectMake(50, 156, self.view.frame.size.width-100, self.scrollView!.frame.size.height/2+10)
//        colorView.layer.cornerRadius = 20
//        colorView.alpha = 1.0
//        self.scrollView!.addSubview(colorView)

//self.highScoreButton.layer.cornerRadius = 8
//self.highScoreButton.setTitle("high score: \(highScore!)", forState: UIControlState.Normal)
//self.view.bringSubviewToFront(self.highScoreButton)
//self.highScoreButton?.hidden = true

//            let tappableSphereNode = SCNSphere(radius: 2.5)
//            tappableNode = SCNNode(geometry: tappableSphereNode)
//            tappableNode?.addChildNode(boingBallNode!)
//            //tappableNode?.position = (boingBallNode?.position)!
//            let material2 = SCNMaterial()
//            material2.specular.contents = UIColor.clearColor()
//            material2.diffuse.contents = UIColor.clearColor()
//            material2.shininess = 1.0
//            tappableSphereNode.materials = [ material2 ]

//scene!.rootNode.addChildNode(tappableNode!)

let imageview = UIImageView()
imageview.frame = CGRectMake(0, 0, 64, 64)
imageview.center = self.view.center
imageview.image = UIImage(named: "fingerTap")
imageview.alpha = 0.0
self.view.addSubview(imageview)


//            pumpkin = pumpkinScene?.rootNode.childNodeWithName("Pumpkin", recursively: false)!
//            let newNode = pumpkin!.copy() as! SCNNode;
//            scene!.rootNode.addChildNode(newNode)


//FIRApp.configure()

//        let rootRef = FIRDatabase.database().reference()
//        let userRef = rootRef.child("users")
//        FIRAuth.auth()?.signInAnonymouslyWithCompletion() { (user, error) in
//            // ...
//            if error != nil {
//                print(error?.description)
//            } else {
//                print(user)
//
//                let theUser = FIRAuth.auth()?.currentUser
//            }
//        }

//        PFAnonymousUtils.logInWithBlock {
//            (user: PFUser?, error: NSError?) -> Void in
//            if error != nil || user == nil {
//                print("Anonymous login failed.")
//            } else {
//                print("Anonymous user logged in.")
//                user?.setObject(highScore!, forKey: "highScore")
//                user?.incrementKey("runCount")
//                user?.saveEventually()
//                PFInstallation.currentInstallation()?.setObject(PFUser.currentUser()!, forKey: "user")
//                PFInstallation.currentInstallation()?.saveInBackground()
//            }
//        }

let imageView = UIImageView()
imageView.image = UIImage(named: "tut")
imageView.frame = CGRectMake(0, 0, self.view.frame.size.width, 200)
imageView.contentMode = UIViewContentMode.ScaleAspectFit
imageView.center = self.view.center
//self.view.addSubview(imageView)

//        let label = UILabel()
//        label.text = "tap to smash\n" + "incoming trump bombs!\n\n" + "keep your phone centered!"
//        label.textColor = UIColor.whiteColor()
//        label.numberOfLines = 4
//        label.font = UIFont(name: "AvenirNext-Bold", size: 18)
//        label.textAlignment = NSTextAlignment.Center
//        label.frame = CGRectMake(0, 0, self.view.frame.size.width, 200)
//        label.center = self.view.center
//        self.view.addSubview(label)

UIView.animateWithDuration(0.1, delay: 0.0, options: UIViewAnimationOptions.TransitionNone, animations: {
imageView.alpha = 0.68
}) { (true) in
UIView.animateWithDuration(0.15, delay: 1.4, options: UIViewAnimationOptions.TransitionNone, animations: {
imageView.alpha = 0.0
}) { (true) in
}
}


//boingBallNode = SCNNode(geometry: ball)
//boingBallNode!.position = SCNVector3(x: Float(randomx), y: Float(randomy), z: -120)
//scene!.rootNode.addChildNode(boingBallNode!)

//            let newNode = pumpkin!.copy() as! SCNNode;
//            dasNode.position = SCNVector3(x: Float(randomx), y: Float(randomy), z: -120)
//            dasNode.addChildNode(newNode)
//            scene!.rootNode.addChildNode(dasNode)


//        myUsernameLabel = UILabel()
//        myUsernameLabel!.frame = CGRectMake(0, self.view.frame.size.height-80, self.view.frame.size.width, 50)
//        let combinedString = "me: " + username
//        myUsernameLabel!.text = combinedString
//        myUsernameLabel!.font = UIFont(name: "AvenirNext-Bold", size: 16.0)
//        myUsernameLabel!.textColor = UIColor.whiteColor()
//        myUsernameLabel!.textAlignment = NSTextAlignment.Center
//        //self.view.addSubview(myUsernameLabel)
//        //self.view.bringSubviewToFront(myUsernameLabel)
//        myUsernameLabel!.alpha = 0.0

//        self.picker?.addSubview(myUsernameLabel!)
//        self.picker?.bringSubviewToFront(myUsernameLabel!)

//        UIView.animateWithDuration(0.2, delay: 0.55, options: UIViewAnimationOptions.TransitionNone, animations: {
//            self.myUsernameLabel!.alpha = 1.0
//            }) { (true) in
//        }



//        UIView.animateWithDuration(0.15, animations: {
//            self.liveLeaderBoardButton?.alpha = 0.0
//        }) { (true) in
//        }

//        let activityView = UIActivityIndicatorView(activityIndicatorStyle: UIActivityIndicatorViewStyle.White)
//        activityView.frame = CGRectMake(self.view.frame.size.width/2-25, self.view.frame.size.height-84, 50, 50)
//        activityView.startAnimating()
//        self.view.addSubview(activityView)
//        self.view.bringSubviewToFront(activityView)
//
//        liveLeaderBoardButton?.enabled = false






